import logging
import asyncio
import os
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if not BOT_TOKEN:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Render!")

bot = Bot(token=BOT_TOKEN)
Bot.set_current(bot)
dp = Dispatcher(bot)

# --- –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
user_data = {}

# --- –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ ---
kb = ReplyKeyboardMarkup(resize_keyboard=True)
kb.add(
    KeyboardButton("üìú –ü–∏—Ä–æ–∂–æ–∫"),
    KeyboardButton("üß™ –ü–æ—Ä–æ—à–æ–∫"),
    KeyboardButton("üïØ –î–µ–ø—Ä–µ—Å—Å—è—à–æ–∫"),
    KeyboardButton("‚úçÔ∏è –≠–∫—Å–ø—Ä–æ–º—Ç"),
)

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∫–∞–Ω–∞–ª–∞ *¬´–≠—Ç–æ –≤–∞–º –Ω–µ –ü—É—à–∫–∏–Ω¬ª*!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∏—Ö–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:"
    )
    await message.answer(text, parse_mode="Markdown", reply_markup=kb)

# --- –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ ---
@dp.message_handler(lambda msg: msg.text in ["üìú –ü–∏—Ä–æ–∂–æ–∫", "üß™ –ü–æ—Ä–æ—à–æ–∫", "üïØ –î–µ–ø—Ä–µ—Å—Å—è—à–æ–∫", "‚úçÔ∏è –≠–∫—Å–ø—Ä–æ–º—Ç"])
async def choose_format(message: types.Message):
    user_data[message.from_user.id] = {"format": message.text}
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Å—Ç–∏—Ö:")

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∏—Ö–∞ ---
@dp.message_handler(lambda msg: msg.from_user.id in user_data and "text" not in user_data[msg.from_user.id])
async def get_text(message: types.Message):
    user_data[message.from_user.id]["text"] = message.text
    await message.answer("üìõ –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ *–ê–Ω–æ–Ω–∏–º–Ω–æ*:", parse_mode="Markdown")

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ ---
@dp.message_handler(lambda msg: msg.from_user.id in user_data and "author" not in user_data[msg.from_user.id])
async def get_author(message: types.Message):
    user_data[message.from_user.id]["author"] = message.text
    data = user_data[message.from_user.id]

    preview = (
        f"üìù *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:*\n\n"
        f"{data['format']}\n\n"
        f"{data['text']}\n\n"
        f"üë§ –ê–≤—Ç–æ—Ä: _{data['author']}_"
    )

    kb_confirm = ReplyKeyboardMarkup(resize_keyboard=True)
    kb_confirm.add(KeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å"), KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))

    await message.answer(preview, parse_mode="Markdown", reply_markup=kb_confirm)

# --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ---
@dp.message_handler(lambda msg: msg.text in ["‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"])
async def confirm(message: types.Message):
    user_id = message.from_user.id

    if user_id not in user_data:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start")
        return

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        del user_data[user_id]
        await message.answer("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /start", reply_markup=kb)
        return

    data = user_data[user_id]
    text_to_send = f"{data['format']}\n\n{data['text']}\n\nüë§ –ê–≤—Ç–æ—Ä: _{data['author']}_"

    await bot.send_message(CHANNEL_ID, text_to_send, parse_mode="Markdown")
    await message.answer("‚ú® –°–ø–∞—Å–∏–±–æ üôè  –í–∞—à —Å—Ç–∏—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ!‚ú®", reply_markup=kb)

    del user_data[user_id]

# --- Keep Alive –¥–ª—è Render ---
async def keep_alive():
    url = os.getenv("RENDER_EXTERNAL_URL")
    if not url:
        return
    while True:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as resp:
                    logging.info(f"üîÑ Pinged {url} ‚Äî status {resp.status}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ ping: {e}")
        await asyncio.sleep(600)  # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç

# --- Webhook ---
async def on_startup(dp):
    url = os.getenv("RENDER_EXTERNAL_URL")
    if url:
        webhook_url = f"{url}/webhook"
        await bot.set_webhook(webhook_url)
        logging.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        asyncio.create_task(keep_alive())

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –∑–∞–ø—Ä–æ—Å–æ–≤ ---
async def handle_webhook(request):
    data = await request.json()
    update = types.Update.to_object(data)
    await dp.process_update(update)
    return web.Response()

# --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ aiohttp ---
async def main():
    app = web.Application()
    app.router.add_post("/webhook", handle_webhook)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", 10000)))
    await site.start()

    await on_startup(dp)
    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ 24/7!")

    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    asyncio.run(main())
