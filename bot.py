from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
import os

API_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

class PoemForm(StatesGroup):
    format = State()
    text = State()
    author = State()
    confirm = State()

format_keyboard = InlineKeyboardMarkup(row_width=2)
format_keyboard.add(
    InlineKeyboardButton("üìú –ü–∏—Ä–æ–∂–æ–∫", callback_data="format_pirozhok"),
    InlineKeyboardButton("üíä –ü–æ—Ä–æ—à–æ–∫", callback_data="format_poroshek"),
    InlineKeyboardButton("üåß –î–µ–ø—Ä–µ—Å—Å—è—à–æ–∫", callback_data="format_depress"),
    InlineKeyboardButton("üé≠ –≠–∫—Å–ø—Ä–æ–º—Ç", callback_data="format_exprompt"),
)

confirm_keyboard = InlineKeyboardMarkup(row_width=2)
confirm_keyboard.add(
    InlineKeyboardButton("‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm"),
    InlineKeyboardButton("‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data="edit")
)

send_again_keyboard = InlineKeyboardMarkup().add(
    InlineKeyboardButton("üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω —Å—Ç–∏—Ö", callback_data="send_again")
)

@dp.message_handler(commands='start')
async def start(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(
    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∫–∞–Ω–∞–ª–∞ *–≠—Ç–æ –≤–∞–º –Ω–µ –ü—É—à–∫–∏–Ω*!\n\n"
    "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–π —Å—Ç–∏—Ö, –∫–æ—Ç–æ—Ä—ã–π, –≤–æ–∑–º–æ–∂–Ω–æ, –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω üí´. –í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∏—Ö–∞:",
    parse_mode="Markdown",
    reply_markup=format_keyboard
)
@dp.callback_query_handler(lambda c: c.data.startswith("format_"), state='*')
async def process_format(callback_query: types.CallbackQuery, state: FSMContext):
    format_map = {
        "format_pirozhok": "üìú –ü–∏—Ä–æ–∂–æ–∫",
        "format_poroshek": "üíä –ü–æ—Ä–æ—à–æ–∫",
        "format_depress": "üåß –î–µ–ø—Ä–µ—Å—Å—è—à–æ–∫",
        "format_exprompt": "üé≠ –≠–∫—Å–ø—Ä–æ–º—Ç"
    }
    selected = format_map.get(callback_query.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    await state.update_data(format=selected)
    await bot.send_message(callback_query.from_user.id, f"–§–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω: {selected}\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∞–º —Å—Ç–∏—Ö:")
    await PoemForm.text.set()

@dp.message_handler(state=PoemForm.text)
async def process_poem(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer("–ö–∞–∫ –ø–æ–¥–ø–∏—Å–∞—Ç—å —ç—Ç–æ—Ç —Å—Ç–∏—Ö? –ù–∞–ø–∏—à–∏ –∏–º—è/–ø—Å–µ–≤–¥–æ–Ω–∏–º –∞–≤—Ç–æ—Ä–∞.")
    await PoemForm.author.set()

@dp.message_handler(state=PoemForm.author)
async def process_author(message: types.Message, state: FSMContext):
    author_text = message.text.strip()
    if author_text.startswith("‚úÖ") or "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å" in author_text.lower():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∞–≤—Ç–æ—Ä–∞ *—Ç–µ–∫—Å—Ç–æ–º* ‚Äî –Ω–µ –Ω–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É.", parse_mode="Markdown")
        return
    await state.update_data(author=author_text)
    data = await state.get_data()
    preview = f"‚ú® –ü–æ–ª—É—á–µ–Ω–æ:\n\n–§–æ—Ä–º–∞—Ç: {data['format']}\n\n–°—Ç–∏—Ö:\n{data['text']}\n\n–ê–≤—Ç–æ—Ä: {data['author']}"
    await message.answer(preview, reply_markup=confirm_keyboard)
    await PoemForm.confirm.set()

@dp.callback_query_handler(lambda c: c.data == "confirm", state=PoemForm.confirm)
async def confirm_submission(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text_to_send = f"‚ú® –ù–æ–≤—ã–π —Å—Ç–∏—Ö –æ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–∞:\n\n–§–æ—Ä–º–∞—Ç: {data['format']}\n\n*{data['text']}*\n\n–ê–≤—Ç–æ—Ä: _{data['author']}_"
    try:
        await bot.send_message(CHANNEL_ID, text_to_send, parse_mode="Markdown")
        await bot.send_message(
            callback_query.from_user.id,
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à —Å—Ç–∏—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ü–∏–∏.\n\n–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ ‚ú®",
            reply_markup=send_again_keyboard
        )
    except Exception as e:
        await bot.send_message(callback_query.from_user.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∫–∞–Ω–∞–ª: {e}")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == "edit", state=PoemForm.confirm)
async def edit_submission(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–•–æ—Ä–æ—à–æ! –ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∏—Ö:")
    await PoemForm.text.set()

@dp.callback_query_handler(lambda c: c.data == "send_again", state='*')
async def send_again(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.send_message(
        callback_query.from_user.id,
        "–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∏—Ö–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=format_keyboard
    )

@dp.message_handler(commands='cancel', state='*')
async def cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞, –Ω–∞–±–µ—Ä–∏ /start.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

